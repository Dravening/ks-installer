---

- name: Kubefed | Getting kubefed installation files
  copy:
    src: "{{ item }}"
    dest: "{{ d3os_dir }}/"
  loop:
    - "kubefed"

- name: Kubefed | Creating manifests
  template:
    src: "{{ item.file }}.j2"
    dest: "{{ d3os_dir }}/{{ item.path }}/{{ item.file }}"
  with_items:
    - { path: kubefed, file: custom-values-kubefed.yaml }
    - { path: kubefed, file: tower.yaml }

- name: Kubefed | Checking kubefed
  shell: >
    {{ bin_dir }}/helm list --namespace kube-federation-system | grep "kubefed"
  register: kubefed_check
  failed_when: false

- block:
    - name: Tower | Installing tower
      shell: >
        {{ bin_dir }}/kubectl -n d3os-system apply -f {{ d3os_dir }}/kubefed/tower.yaml
      register: tower_result
      failed_when: false

    - name: Kubefed | Initing kube-federation-system
      shell: >
        {{ bin_dir }}/helm upgrade --install kubefed {{ d3os_dir }}/kubefed/kubefed
        -f {{ d3os_dir }}/kubefed/custom-values-kubefed.yaml
        --namespace kube-federation-system --wait --timeout 1800s
      register: kubefed_result
      until: kubefed_result is succeeded
      retries: 10
      delay: 60

    - name: Kubfed | Labeling kube-federation-system namespace
      shell: >
        {{ bin_dir }}/kubectl label namespace kube-federation-system d3os.io/workspace=system-workspace --overwrite


- name: d3os | Checking kubefed-admission-webhook status
  wait_for:
    host: "kubefed-admission-webhook.kube-federation-system.svc"
    port: 443
    delay: 5
    timeout: 1800


- name: Kubefed | Creating MultiCluster crds
  shell: "{{ bin_dir }}/kubectl create -f {{ item }} -n kube-federation-system"
  register: crds_result
  failed_when: "crds_result.stderr and 'AlreadyExists' not in crds_result.stderr"
  until: crds_result is succeeded
  retries: 5
  delay: 5
  with_fileglob:
    - "{{ d3os_dir }}/kubefed/federatedcrds/*"


- name: Kubefed | Importing multicluster status
  shell: >
    {{ bin_dir }}/kubectl patch cc ks-installer
    --type merge
    -p '{"status": {"multicluster": {"status": "enabled", "enabledTime": "{{ lookup('pipe','date  +%Y-%m-%dT%H:%M:%S%Z') }}"}}}'
    -n d3os-system
  register: cc_result
  failed_when: "cc_result.stderr and 'Warning' not in cc_result.stderr"
  until: cc_result is succeeded
  retries: 5
  delay: 3
