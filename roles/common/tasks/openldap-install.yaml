- name: d3os | Getting openldap installation files
  copy:
    src: "{{ item }}"
    dest: "{{ d3os_dir }}/"
  loop:
    - "openldap-ha"


- name: d3os | Creating manifests
  template:
    src: "{{ item.file }}.j2"
    dest: "{{ d3os_dir }}/{{ item.file }}"
  with_items:
    - { name: custom-values-openldap, file: custom-values-openldap.yaml }


- name: d3os | Checking old openldap status
  shell: >
    {{ bin_dir }}/kubectl get pod
    -n d3os-system
    -l app=openldap,tier=database,version=openldap-2.4 | wc -l
  register: old_openldap_exist

- name: d3os | Shutdown ks-account
  shell: >
    {{ bin_dir }}/kubectl -n d3os-system scale deployment ks-account --replicas=0
  when:
    - old_openldap_exist.stdout != "0"

- name: d3os | Deleting and backup old openldap svc
  shell: >
    {{ bin_dir }}/kubectl get svc -n d3os-system openldap -o yaml > {{ d3os_dir }}/openldap-svc-backup.yaml
    &&
    {{ bin_dir }}/kubectl delete svc -n d3os-system openldap
  when:
    - old_openldap_exist.stdout != "0"


- name: d3os | Checking openldap
  shell: >
    {{ bin_dir }}/helm list -n d3os-system | grep "ks-openldap"
  register: openldap_check
  failed_when: false


- name: d3os | Deploying openldap
  shell: >
    {{ bin_dir }}/helm upgrade --install ks-openldap
    {{ d3os_dir }}/openldap-ha
    -f {{ d3os_dir }}/custom-values-openldap.yaml
    --set fullnameOverride=openldap
    --namespace d3os-system
  when:
    - (openldap_check.stdout.find("deployed") == -1) or (openldap_check.stdout.find("1.0") == -1)

- import_tasks: openldap-migration.yaml
  when:
    - old_openldap_exist.stdout != "0"


- name: d3os | Restarting ks-account
  shell: >
    {{ bin_dir }}/kubectl -n d3os-system scale deployment ks-account --replicas=1
  when:
    - old_openldap_exist.stdout != "0"


- name: d3os | Importing openldap status
  shell: >
    {{ bin_dir }}/kubectl patch cc ks-installer
    --type merge
    -p '{"status": {"openldap": {"status": "enabled", "enabledTime": "{{ lookup('pipe','date  +%Y-%m-%dT%H:%M:%S%Z') }}"}}}'
    -n d3os-system
  register: cc_result
  failed_when: "cc_result.stderr and 'Warning' not in cc_result.stderr"
  until: cc_result is succeeded
  retries: 5
  delay: 3